@using Thesis.Areas.Identity.Models
@model List<UserModel>

<style>
    .userrow:hover {
        cursor: pointer;
    }
</style>

<button id="delete" disabled class="btn btn-outline-danger">
    Delete
</button>

<table class="table table-striped .table-responsive">
    <thead>
        <tr>
            <th></th>
            <th>
                Username
            </th>
            <th>
                Email address
            </th>
            <th>
                Email confirmed
            </th>
            <th>
                List of roles
            </th>
        </tr>
    </thead>
    @foreach (UserModel user in Model)
    {
        <tr class="userrow" data-id="@user.id">
            <td>
                <input data-id="@user.id" class="rowCheckbox" type="checkbox" />
            </td>
            <td>
                @user.userName
            </td>
            <td>
                @user.email
            </td>
            <td>
                @if (user.emailConfirmed)
                {
                    <span>Yes</span>
                }
                else
                {
                    <span>No</span>
                }
            </td>
            <td>
                @string.Join(",", user.roles.ToArray())
            </td>
        </tr>
    }
</table>

<script type="text/javascript">
    function getChecked() {
        return $('.rowCheckbox:checkbox:checked').map(function () {
            return $(this).data('id');
        }).get()
    }
    window.onload = function () {
        $(function () {
            $('.rowCheckbox').click(function (ev) {
                ev.stopPropagation();
                if (getChecked().length > 0) {
                    $('#delete').prop('disabled', false);
                }
                else {
                    $('#delete').prop('disabled', true);
                }
            })
            $('.userrow').click(function () {
                document.location = '/Identity/User/editUser?id=' + $(this).data('id')
            })
            $('#delete').click(function () {
                const userIds = getChecked();
                fetch('/Identity/User/delete', {
                    method: 'Delete',
                    headers: {
                        Accept: 'application.json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(userIds)
                })
                    .then(function (a) {
                        return a.json();
                    })
                    .then(function (data) {
                        Toastify({
                            text: data.text,
                            duration: 3000,
                            style: {
                                background: data.success ? "green" : "red"
                            }
                        }).showToast();
                        if (data.success) {
                            setTimeout(function () {
                                location.reload();
                            }, 1000);
                        }
                    })
                    .catch(error => Toastify({
                        text: error,
                        duration: 3000,
                        style: {
                            background: "red"
                        }
                    }).showToast()
                    )
            })
        })
    }
</script>